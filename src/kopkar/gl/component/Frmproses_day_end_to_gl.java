/*
 * From op_salesman
 *
 * Created on June 29, 2007, 2:00 PM
 * 
 * 
 * How to Call this Form on FrmMainFrame
 * Sample : 
 *    
 * import common.component.FrmCompany;
 * 
 * .......
 * 
 * 
 * FrmCompany frmCompany;
 * 
 * .......
 * 
 try {
        if (frmCompany == null) {
            frmmCompany = new FrmCompany(this);
        }
        
        showForm(frmCompany);
        
    }catch(Exception e) {
        e.printStackTrace();
    }
 * 
 */

package kopkar.gl.component;


import classinterface.NavigatorFormReportInt;
import common.component.FrmMainFrame;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jdbc.DbBean;
import kopkar.gl.objectclasses.gl_kalender_detail1ext;
import kopkar.gl.objectclasses.gl_kalenderext;
import kopkar.gl.objectclasses.gl_kalenderextcol;
import kopkar.gl.objectclasses.proses_day_end_to_glext;
import kopkar.gl.objectclasses.proses_day_end_to_glextcol;
import kopkar.utils.browsecontroller;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import utils.CodeException;
import utils.GlobalModel;
import utils.GlobalUtils;
import utils.appsettinghandler;

/**
 *
 * @author  Generator
 */

public class Frmproses_day_end_to_gl extends javax.swing.JInternalFrame implements NavigatorFormReportInt {

    private static int istatus = 0;
    private static int iformtype = 1;
    public static String CLASSNAME="Frmrp_customer";
    browsecontroller obrowse=new browsecontroller();
    JasperPrint jasperPrint;
    JasperReport jasperReport;
    DbBean db=appsettinghandler.db;
    String status="";
    proses_day_end_to_glextcol obj=new proses_day_end_to_glextcol();


    FrmMainFrame mf ;
    DefaultTableModel model=null;

   
    /** Creates new form Area */
    public Frmproses_day_end_to_gl() throws CodeException {
        initComponents();

    }
    
    public Frmproses_day_end_to_gl(FrmMainFrame mf) throws CodeException{
        this.mf = mf;
        initComponents();
        
        model=(DefaultTableModel) jTable1.getModel();

        showtahun();
        showbulan();
        showData();
    }

    private void showtahun() {
        gl_kalenderextcol okal=new gl_kalenderextcol();
        try {
            okal.initdata();
            jcmbyop.removeAllItems();
            for (int i=0;i<okal.size();i++){
                gl_kalenderext o = okal.get(i);
                jcmbyop.addItem(o.getyop());
            }
            jcmbyop.setSelectedItem(GlobalUtils.toInt(GlobalUtils.formatDate(GlobalUtils.sessiondate,"yyyy")));
        } catch (SQLException ex) {
            Logger.getLogger(Frmgl_transaksi_rab.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void showbulan() {
        gl_kalenderext okal=new gl_kalenderext();
        gl_kalender_detail1ext o;
        try {
            jcmbmop.removeAllItems();
            if (jcmbyop.getItemCount()>0&&jcmbyop.getSelectedIndex()>-1){
                if (okal.initdata((Integer) jcmbyop.getSelectedItem())) {
                    for (int i = 0; i < okal.getDetail1().size(); i++) {
                        o=okal.getDetail1().get(i);
                        jcmbmop.addItem(GlobalUtils.getMonthName(o.getmop()));
                    }
                }
                jcmbmop.setSelectedItem(GlobalUtils.getMonthName(GlobalUtils.toInt(GlobalUtils.formatDate(GlobalUtils.sessiondate,"MM"))));
            }
        } catch (CodeException ex) {
            Logger.getLogger(Frmgl_transaksi_rab.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
       
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jHeader = new javax.swing.JLabel();
        HorizontalLine = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jCheckBox1 = new javax.swing.JCheckBox();
        jlblsupplier_code1 = new javax.swing.JLabel();
        jlblsupplier_code2 = new javax.swing.JLabel();
        jlblsupplier_code3 = new javax.swing.JLabel();
        jcmbmop = new javax.swing.JComboBox();
        jcmbyop = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Day End Process");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(null);

        jHeader.setBackground(new java.awt.Color(102, 102, 102));
        jHeader.setFont(new java.awt.Font("Dialog", 1, 10));
        jHeader.setForeground(new java.awt.Color(255, 255, 255));
        jHeader.setText(" : : Day End Process");
        jHeader.setAlignmentY(0.0F);
        jHeader.setOpaque(true);
        getContentPane().add(jHeader);
        jHeader.setBounds(30, 30, 200, 20);

        HorizontalLine.setForeground(new java.awt.Color(102, 102, 102));
        HorizontalLine.setAlignmentX(0.0F);
        HorizontalLine.setAlignmentY(0.0F);
        getContentPane().add(HorizontalLine);
        HorizontalLine.setBounds(160, 50, 650, 6);

        jSeparator3.setForeground(new java.awt.Color(102, 102, 102));
        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setAlignmentX(0.0F);
        jSeparator3.setAlignmentY(0.0F);
        getContentPane().add(jSeparator3);
        jSeparator3.setBounds(30, 50, 6, 400);

        jTable1.setFont(new java.awt.Font("Dialog", 0, 10));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Pilih", "Transfer Data", "Jumlah", "Total", "No Process", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable1PropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setMinWidth(50);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(50);
        jTable1.getColumnModel().getColumn(1).setMinWidth(300);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(300);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(300);
        jTable1.getColumnModel().getColumn(5).setMinWidth(200);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(200);
        jTable1.getColumnModel().getColumn(5).setMaxWidth(200);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(70, 140, 730, 240);

        jCheckBox1.setFont(new java.awt.Font("Dialog", 1, 10));
        jCheckBox1.setText("Pilih Semua");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox1);
        jCheckBox1.setBounds(70, 390, 91, 24);

        jlblsupplier_code1.setFont(new java.awt.Font("Dialog", 1, 10));
        jlblsupplier_code1.setText("Periode");
        getContentPane().add(jlblsupplier_code1);
        jlblsupplier_code1.setBounds(70, 80, 140, 13);

        jlblsupplier_code2.setFont(new java.awt.Font("Dialog", 1, 10));
        jlblsupplier_code2.setText("Bulan");
        getContentPane().add(jlblsupplier_code2);
        jlblsupplier_code2.setBounds(70, 120, 140, 13);

        jlblsupplier_code3.setFont(new java.awt.Font("Dialog", 1, 10));
        jlblsupplier_code3.setText("Tahun");
        getContentPane().add(jlblsupplier_code3);
        jlblsupplier_code3.setBounds(70, 100, 140, 13);

        jcmbmop.setFont(new java.awt.Font("Dialog", 1, 10));
        jcmbmop.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcmbmop.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbmopItemStateChanged(evt);
            }
        });
        getContentPane().add(jcmbmop);
        jcmbmop.setBounds(260, 110, 160, 20);

        jcmbyop.setFont(new java.awt.Font("Dialog", 1, 10));
        jcmbyop.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcmbyop.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbyopItemStateChanged(evt);
            }
        });
        getContentPane().add(jcmbyop);
        jcmbyop.setBounds(260, 90, 80, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
         try {
            moveFirst();

         } catch (CodeException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formInternalFrameOpened

private void kdatePurchaseDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kdatePurchaseDateFocusLost

}//GEN-LAST:event_kdatePurchaseDateFocusLost

private void kdatePurchaseDateCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_kdatePurchaseDateCaretPositionChanged

}//GEN-LAST:event_kdatePurchaseDateCaretPositionChanged

private void kdatePurchaseDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_kdatePurchaseDatePropertyChange

}//GEN-LAST:event_kdatePurchaseDatePropertyChange

private void jTable1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable1PropertyChange
    // TODO add your handling code here:
    int irow=jTable1.getSelectedRow();
    if (irow>-1){
            proses_day_end_to_glext o = obj.get(irow);
            o.setPilih(false);
            if (o.getJumlah()>0){
               o.setPilih(Boolean.parseBoolean(GlobalUtils.churuf(model.getValueAt(irow, 0))));
            }
            obj.set(irow, o);
    }
}//GEN-LAST:event_jTable1PropertyChange

private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
    // TODO add your handling code here:
    int terpilih=0;
    for (int i=0;i<model.getRowCount();i++){
        model.setValueAt(jCheckBox1.isSelected(), i, 0);
        proses_day_end_to_glext o = obj.get(i);
        o.setPilih(false);
        if (o.getJumlah()>0){
            o.setPilih(jCheckBox1.isSelected());
            terpilih++;
        } else {
            model.setValueAt(false, i, 0);
        }
        obj.set(i, o);
    }

    if (terpilih==0){
        jCheckBox1.setSelected(false);
    }
}//GEN-LAST:event_jCheckBox1ActionPerformed

private void jcmbyopItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbyopItemStateChanged
    // TODO add your handling code here:
    showbulan();
}//GEN-LAST:event_jcmbyopItemStateChanged

private void jcmbmopItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbmopItemStateChanged
        try {
            // TODO add your handling code here:
            if (jcmbmop.getSelectedIndex()>-1){
                showData();
            }
        } catch (CodeException ex) {
            Logger.getLogger(Frmproses_day_end_to_gl.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_jcmbmopItemStateChanged
                                     
private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {                                            
    setToolBar(iformtype,istatus);
    mf.setIcon(CLASSNAME);
        try {
            showData();
        } catch (CodeException ex) {
            Logger.getLogger(Frmproses_day_end_to_gl.class.getName()).log(Level.SEVERE, null, ex);
        }
}                                           


    public void execute() throws CodeException {
        int ires = JOptionPane.showConfirmDialog(this, "Lakukan process Day End?","Day End Process",JOptionPane.OK_CANCEL_OPTION);
        if (ires==JOptionPane.OK_OPTION){
            proses_day_end_to_glext o;
             if (obj.run_process(GlobalUtils.churuf(jcmbyop.getSelectedItem()),GlobalUtils.churuf(jcmbmop.getSelectedIndex()+1))){
                 for (int i=0;i<obj.size();i++){
                     o=obj.get(i);
                     model.setValueAt(o.getNo_Process(), i, 4);
                     model.setValueAt(o.getStatus(), i, 5);
                 }
                 JOptionPane.showMessageDialog(this, "Process Complete");
             }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Frmproses_day_end_to_gl().setVisible(true);
                } catch (CodeException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator HorizontalLine;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jHeader;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox jcmbmop;
    private javax.swing.JComboBox jcmbyop;
    private javax.swing.JLabel jlblsupplier_code1;
    private javax.swing.JLabel jlblsupplier_code2;
    private javax.swing.JLabel jlblsupplier_code3;
    // End of variables declaration//GEN-END:variables

 

    public void setToolBar(int iFormType, int istatus) {
        mf.setToolBar(iformtype,istatus);

    }

    public void delete() throws CodeException {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void moveFirst() throws CodeException {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void movePrevious() throws CodeException {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void moveNext() throws CodeException {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void moveLast() throws CodeException {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void newData() throws CodeException {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void saveData() throws CodeException {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void printData() throws CodeException {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void showData() throws CodeException {
        System.out.println(GlobalUtils.sessiondate);
        proses_day_end_to_glext o;
        try {
            obj=new proses_day_end_to_glextcol();
            obj.initdata(GlobalUtils.sessiondate.substring(6, 10), GlobalUtils.churuf(jcmbmop.getSelectedIndex()+1));
            GlobalModel.clearRow(model);
            for (int i=0;i<obj.size();i++){
                o=obj.get(i);
                model.addRow(new Object[model.getColumnCount()]);
                model.setValueAt(o.getPilih(), i, 0);
                model.setValueAt(o.getTransfer_Data(),i,1);
                model.setValueAt(o.getJumlah(),i,2);
                model.setValueAt(o.getTotal(),i,3);
                model.setValueAt(o.getNo_Process(),i,4);
                model.setValueAt(o.getStatus(),i,5);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Frmproses_day_end_to_gl.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void setData() throws CodeException {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void undo() throws CodeException {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void searchData() throws CodeException {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void importCsv() throws CodeException {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void exportCsv() throws CodeException {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void importText() throws CodeException {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    public void exportText() throws CodeException {
        //throw new UnsupportedOperationException("Not supported yet.");
    }
    
}
