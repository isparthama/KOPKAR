/*
 * From gl_kalender
 *
 * Created on June 29, 2007, 2:00 PM
 * 
 * 
 * How to Call this Form on FrmMainFrame
 * Sample : 
 *    
 * import common.component.FrmCompany;
 * 
 * .......
 * 
 * 
 * FrmCompany frmCompany;
 * 
 * .......
 * 
 try {
        if (frmCompany == null) {
            frmmCompany = new FrmCompany(this);
        }
        
        showForm(frmCompany);
        
    }catch(Exception e) {
        e.printStackTrace();
    }
 * 
 */

package kopkar.gl.component;


import classinterface.NavigatorFormInt;
import common.component.FrmBrowseData;
import common.component.FrmMainFrame;
import javax.swing.table.DefaultTableModel;
import kopkar.gl.objectclasses.gl_kalender_detail1ext;
import kopkar.gl.objectclasses.gl_kalenderext;
import java.util.logging.Level;
import java.util.logging.Logger;
import kopkar.gl.objectclasses.gl_kalender_detail1extcol;
import kopkar.utils.browsecontroller;
import utils.CodeException;
import utils.GlobalModel;
import utils.GlobalUtils;

/**
 *
 * @author  Generator
 */

public class Frmgl_kalender extends javax.swing.JInternalFrame implements NavigatorFormInt {

    private static int istatus = 0;
    private static int iformtype = 0;
    public static String CLASSNAME="Frmgl_kalender";
    
    FrmMainFrame mf ;

    gl_kalenderext obj=new gl_kalenderext();
    gl_kalender_detail1extcol objds;
    private DefaultTableModel model;
   
    /** Creates new form Area */
    public Frmgl_kalender() throws CodeException {
        initComponents();
    }
    
    public Frmgl_kalender(FrmMainFrame mf) throws CodeException{
        this.mf = mf;
        initComponents();
        model=(DefaultTableModel) jtbldetail.getModel();
    }
     
       
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jHeader = new javax.swing.JLabel();
        HorizontalLine = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jbtnBrowse = new javax.swing.JButton();
        jlblyop = new javax.swing.JLabel();
        jtxtyop = new javax.swing.JTextField();
        jtxtTanggalEntry = new javax.swing.JTextField();
        jtxtTanggalUpdate = new javax.swing.JTextField();
        jtxtUserID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbldetail = new javax.swing.JTable();
        jchkaktif = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Master Kalender");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(null);

        jHeader.setBackground(new java.awt.Color(102, 102, 102));
        jHeader.setFont(new java.awt.Font("Dialog", 1, 10));
        jHeader.setForeground(new java.awt.Color(255, 255, 255));
        jHeader.setText(" : : Master Kalender");
        jHeader.setAlignmentY(0.0F);
        jHeader.setOpaque(true);
        getContentPane().add(jHeader);
        jHeader.setBounds(30, 30, 200, 20);

        HorizontalLine.setForeground(new java.awt.Color(102, 102, 102));
        HorizontalLine.setAlignmentX(0.0F);
        HorizontalLine.setAlignmentY(0.0F);
        getContentPane().add(HorizontalLine);
        HorizontalLine.setBounds(160, 50, 650, 6);

        jSeparator3.setForeground(new java.awt.Color(102, 102, 102));
        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setAlignmentX(0.0F);
        jSeparator3.setAlignmentY(0.0F);
        getContentPane().add(jSeparator3);
        jSeparator3.setBounds(30, 50, 6, 400);

        jbtnBrowse.setFont(new java.awt.Font("Dialog", 0, 10));
        jbtnBrowse.setText("...");
        jbtnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBrowseActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnBrowse);
        jbtnBrowse.setBounds(420, 100, 30, 17);

        jlblyop.setFont(new java.awt.Font("Dialog", 1, 10));
        jlblyop.setText("Tahun");
        getContentPane().add(jlblyop);
        jlblyop.setBounds(70, 100, 140, 13);

        jtxtyop.setFont(new java.awt.Font("Dialog", 0, 10));
        jtxtyop.setText("yop");
        jtxtyop.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtxtyopFocusGained(evt);
            }
        });
        getContentPane().add(jtxtyop);
        jtxtyop.setBounds(260, 100, 150, 23);

        jtxtTanggalEntry.setEditable(false);
        jtxtTanggalEntry.setFont(new java.awt.Font("Dialog", 0, 8));
        jtxtTanggalEntry.setText("TanggalEntry");
        getContentPane().add(jtxtTanggalEntry);
        jtxtTanggalEntry.setBounds(360, 30, 170, 20);

        jtxtTanggalUpdate.setEditable(false);
        jtxtTanggalUpdate.setFont(new java.awt.Font("Dialog", 0, 8));
        jtxtTanggalUpdate.setText("TanggalUpdate");
        getContentPane().add(jtxtTanggalUpdate);
        jtxtTanggalUpdate.setBounds(530, 30, 130, 20);

        jtxtUserID.setEditable(false);
        jtxtUserID.setFont(new java.awt.Font("Dialog", 0, 8));
        jtxtUserID.setText("UserID");
        getContentPane().add(jtxtUserID);
        jtxtUserID.setBounds(660, 30, 140, 20);

        jtbldetail.setFont(new java.awt.Font("Dialog", 0, 10));
        jtbldetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Bulan", "Status", "Hitung Ulang", "Close Date", "User"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jtbldetail.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jtbldetailPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jtbldetail);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(70, 130, 690, 230);

        jchkaktif.setFont(new java.awt.Font("Dialog", 1, 10));
        jchkaktif.setText("Aktif");
        getContentPane().add(jchkaktif);
        jchkaktif.setBounds(420, 70, 54, 24);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
         try {
            moveFirst();

         } catch (CodeException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formInternalFrameOpened

private void kdatePurchaseDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kdatePurchaseDateFocusLost

}//GEN-LAST:event_kdatePurchaseDateFocusLost

private void kdatePurchaseDateCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_kdatePurchaseDateCaretPositionChanged

}//GEN-LAST:event_kdatePurchaseDateCaretPositionChanged

private void kdatePurchaseDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_kdatePurchaseDatePropertyChange

}//GEN-LAST:event_kdatePurchaseDatePropertyChange

private void jbtnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBrowseActionPerformed
    // TODO add your handling code here:
    browsecontroller obrowse=new browsecontroller();
    obrowse.showbrowser(obrowse.gl_kalender, "", jtxtyop);

    if (!jtxtyop.getText().equalsIgnoreCase("")){
            try {
                if (obj.initdata(GlobalUtils.toInt(jtxtyop.getText()))) {
                    showData();
                }
            } catch (CodeException ex) {
                Logger.getLogger(Frmgl_kalender.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
}//GEN-LAST:event_jbtnBrowseActionPerformed

private void jtbldetailPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jtbldetailPropertyChange
    // TODO add your handling code here:
    int irow=jtbldetail.getSelectedRow();
    int icol=jtbldetail.getSelectedColumn();

    if (irow>-1){
        cekdetail();
    }
}//GEN-LAST:event_jtbldetailPropertyChange

private void jtxtyopFocusGained(java.awt.event.FocusEvent evt) {                                 
        // TODO add your handling code here:
    jtxtyop.setSelectionStart(0);
    jtxtyop.setSelectionEnd(jtxtyop.getText().length());
}                                   

private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {                                            
    setToolBar(iformtype,istatus);
    mf.setIcon(CLASSNAME);
}                                           


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Frmgl_kalender().setVisible(true);
                } catch (CodeException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator HorizontalLine;
    private javax.swing.JLabel jHeader;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton jbtnBrowse;
    private javax.swing.JCheckBox jchkaktif;
    private javax.swing.JLabel jlblyop;
    private javax.swing.JTable jtbldetail;
    private javax.swing.JTextField jtxtTanggalEntry;
    private javax.swing.JTextField jtxtTanggalUpdate;
    private javax.swing.JTextField jtxtUserID;
    private javax.swing.JTextField jtxtyop;
    // End of variables declaration//GEN-END:variables

 
    public void moveFirst() throws CodeException {
        obj.moveFirst();
        
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void movePrevious() throws CodeException {
        obj.movePrevious();

        showData();
        mf.setIcon(CLASSNAME);
    }

    public void moveNext() throws CodeException {
        obj.moveNext();

        showData();
        mf.setIcon(CLASSNAME);
    }

    public void moveLast() throws CodeException {
        obj.moveLast();

        showData();
        mf.setIcon(CLASSNAME);
    }

    public void searchData() throws CodeException {
        showData();
        mf.setIcon(CLASSNAME);

    }

    private void clearfield(){
        jtxtyop.setText("");
        jchkaktif.setSelected(true);

        jtxtTanggalEntry.setText("");
        jtxtTanggalUpdate.setText("");
        jtxtUserID.setText("");
    }

    public void newData() throws CodeException {
        istatus=1;
        clearfield();
        setToolBar(iformtype,istatus);
    }

    public void saveData() throws CodeException {
        setData();
        obj.update();
        showData();

        istatus = 0;
        setToolBar(iformtype,istatus);
        mf.setIcon(CLASSNAME);
    }

    public void showData() throws CodeException {
        setToolBar(iformtype,istatus);
        setCursor(GlobalUtils.HOURGLASSCURSOR);

        jtxtyop.setText(GlobalUtils.churuf(obj.getyop()));
        if (obj.getaktif().equalsIgnoreCase("Y")){
            jchkaktif.setSelected(true);
        } else {
            jchkaktif.setSelected(false);
        }

        objds=obj.getDetail1();
        GlobalModel.clearRow(model);
        for(int i=0;i<objds.size();i++){
            boolean baktif=false;
            boolean brekalkulasi=false;
            gl_kalender_detail1ext o = objds.get(i);
            model.addRow(new Object[model.getColumnCount()]);
            model.setValueAt(GlobalUtils.getMonthName(o.getmop()), i, 0);
            if (o.getaktif().equalsIgnoreCase("Y")){
                baktif=true;
            }
            model.setValueAt(baktif, i, 1);
            if (o.getrekalkulasi().equalsIgnoreCase("Y")){
                brekalkulasi=true;
            }
            model.setValueAt(brekalkulasi, i, 2);
            model.setValueAt(o.getclosedate(), i, 3);
            model.setValueAt(o.getcloseuser(), i, 4);
        }

        jtxtTanggalEntry.setText(GlobalUtils.churuf(obj.getentrydate()));
        jtxtTanggalUpdate.setText(GlobalUtils.churuf(obj.getauditdate()));
        jtxtUserID.setText(obj.getaudituser());

        setCursor(GlobalUtils.NORMALCURSOR);
    }

    public void delete() throws CodeException {
        if (obj.delete()){
            obj.moveNext();
            showData();
        }
        mf.setIcon(CLASSNAME);
    }

    public void setToolBar(int iFormType, int istatus) {
        mf.setToolBar(iformtype,istatus);

        if (istatus==1){
            jbtnBrowse.setEnabled(false);
        } else {
            jbtnBrowse.setEnabled(true);
        }
    }

    public void setData() throws CodeException {
        if (istatus==1){
            obj.insert();
        }
        obj.setyop(GlobalUtils.toInt(jtxtyop.getText()));
        if (jchkaktif.isSelected()){
        obj.setaktif("Y");
        } else {
            obj.setaktif("N");
        }

        

    }

    public void undo() throws CodeException {
        istatus = 0;
        showData();
    }

    public void execute() throws CodeException {
       saveData();
    }

    public void printData() throws CodeException {
    }

    public void importCsv() throws CodeException {
            

    }

    public void exportCsv() throws CodeException {
        
        
    }

    public void importText() throws CodeException {
        
    }

    public void exportText() throws CodeException {
        
    }

    private void cekdetail() {
        int row = jtbldetail.getSelectedRow();
        int col = jtbldetail.getSelectedColumn();


        gl_kalender_detail1ext objd=new gl_kalender_detail1ext();
        if (row > objds.size() - 1) {
            objd = new gl_kalender_detail1ext();
            objd.setstatus(gl_kalender_detail1ext.Status_Insert);
            objds.add(objd);
        } else {
            objd = (gl_kalender_detail1ext) objds.get(row);
            if (!objd.getstatus().equals(gl_kalender_detail1ext.Status_Insert)&&!objd.getstatus().equals(gl_kalender_detail1ext.Status_delete)){
                objd.setstatus(gl_kalender_detail1ext.Status_update);
            }
        }

        if (Boolean.parseBoolean(GlobalUtils.churuf(model.getValueAt(row, 1)))){
        objd.setaktif("Y");
        } else {
        objd.setaktif("N");
        }
        if (Boolean.parseBoolean(GlobalUtils.churuf(model.getValueAt(row, 2)))){
        objd.setrekalkulasi("Y");
        } else {
        objd.setrekalkulasi("N");
        }
        objds.set(row, objd);
    }

    
}
