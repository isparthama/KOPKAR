/*
 * From Template
 *
 * Created on June 29, 2007, 2:00 PM
 * 
 * How to Call this Form on FrmMainFrame
 * Sample : 
 *    
 * import common.component.FrmMastergroup;
 * 
 * .......
 * 
 try {
        if (frmmastergroup == null) {
            frmmastergroup = new FrmMastergroup(this);
        }
        
        showForm(frmmastergroup);
        
    }catch(Exception e) {
        e.printStackTrace();
    }
 * 
 */

package common.component;

import classinterface.NavigatorFormInt;
import common.objectclasses.Mastercompany;
import common.objectclasses.Mastermodule;
import common.objectclasses.extended.MasterGroupExt;
import common.objectclasses.extended.MasterModuleExtcols;
import common.objectclasses.extended.Mastercompanycols;
import common.objectclasses.extended.MastergroupdetailExt;
import common.objectclasses.extended.Mastergroupdetailcols;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import kopkar.utils.browsecontroller;
import utils.CodeException;
import utils.GlobalModel;
import utils.GlobalUtils;


/**
 *
 * @author  Generator
 */

public class FrmMastergroup extends javax.swing.JInternalFrame implements NavigatorFormInt {

    private static int istatus = 0;
    private static int iformtype = 0;
    public static String CLASSNAME="FrmMastergroup";
    
    FrmMainFrame mf ;
    
    
    public MasterGroupExt obj = new MasterGroupExt();
    
    Object[] data = new Object[15];

    protected DefaultTableModel tmodel = null;
    private boolean bonload;
    private MasterModuleExtcols modules;
    private Mastergroupdetailcols mgs;
   
    /** Creates new form Area */
    public FrmMastergroup() throws CodeException {
        initComponents();
    }

    protected void setCmbAccess(){
        jcmbAccess.removeAllItems();
        jcmbAccess.addItem("All");
        jcmbAccess.addItem("Read");
        jcmbAccess.addItem("Confirm");
        jcmbAccess.addItem("Entry");
        jcmbAccess.addItem("Update");
        jcmbAccess.addItem("Delete");
        jcmbAccess.addItem("Print");
        jcmbAccess.addItem("Export");
        jcmbAccess.addItem("Import");
    }
    public FrmMastergroup(FrmMainFrame mf) throws CodeException{
        this.mf = mf;
        
        initComponents();

        tmodel=(DefaultTableModel) jtblGroupDetail.getModel();
        setCmbAccess();
        jtblGroupDetail.setAutoCreateRowSorter(true);
        
        GlobalModel.showTable(jtblGroupDetail, tmodel);
        
        GlobalModel.clearRow(tmodel);

        try {
            Mastercompanycols mastercompanys  = new Mastercompanycols();
            if (mastercompanys.initdata()){
                int i=0;
                for(i=0;i<mastercompanys.size();i++) {
                       Mastercompany m = mastercompanys.get(i);
                       jcmbCompany.addItem(m.getCompany());

                       if (m.getSelected()==1) {
                           jcmbCompany.setSelectedIndex(jcmbCompany.getItemCount()-1);
                       }
                }
            }
        }catch(Exception e) {

        }
        
    }
     

    protected void inisialisasicomponents(){
        initComponents();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jHeader = new javax.swing.JLabel();
        HorizontalLine = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jlblKodeGroup = new javax.swing.JLabel();
        jtxtKodeGroup = new javax.swing.JTextField();
        jlblKeterangan = new javax.swing.JLabel();
        jtxtKeterangan = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblGroupDetail = new javax.swing.JTable();
        jbtnBrowse = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jcmbCompany = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jcmbAccess = new javax.swing.JComboBox();
        jtxtFind = new javax.swing.JTextField();
        jtxtTanggalEntry = new javax.swing.JTextField();
        jtxtTanggalUpdate = new javax.swing.JTextField();
        jtxtUserID = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mastergroup");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jHeader.setBackground(new java.awt.Color(102, 102, 102));
        jHeader.setFont(new java.awt.Font("Dialog", 1, 10));
        jHeader.setForeground(new java.awt.Color(255, 255, 255));
        jHeader.setText(" : : Master Group");
        jHeader.setAlignmentY(0.0F);
        jHeader.setOpaque(true);
        getContentPane().add(jHeader);
        jHeader.setBounds(30, 30, 130, 20);

        HorizontalLine.setForeground(new java.awt.Color(102, 102, 102));
        HorizontalLine.setAlignmentX(0.0F);
        HorizontalLine.setAlignmentY(0.0F);
        getContentPane().add(HorizontalLine);
        HorizontalLine.setBounds(160, 50, 650, 2);

        jSeparator3.setForeground(new java.awt.Color(102, 102, 102));
        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setAlignmentX(0.0F);
        jSeparator3.setAlignmentY(0.0F);
        getContentPane().add(jSeparator3);
        jSeparator3.setBounds(30, 50, 2, 400);

        jlblKodeGroup.setFont(new java.awt.Font("Dialog", 1, 10));
        jlblKodeGroup.setText("KodeGroup");
        getContentPane().add(jlblKodeGroup);
        jlblKodeGroup.setBounds(70, 80, 140, 14);

        jtxtKodeGroup.setFont(new java.awt.Font("Dialog", 0, 10));
        jtxtKodeGroup.setText("KodeGroup");
        getContentPane().add(jtxtKodeGroup);
        jtxtKodeGroup.setBounds(260, 80, 160, 20);

        jlblKeterangan.setFont(new java.awt.Font("Dialog", 1, 10));
        jlblKeterangan.setText("Keterangan");
        getContentPane().add(jlblKeterangan);
        jlblKeterangan.setBounds(70, 100, 140, 14);

        jtxtKeterangan.setFont(new java.awt.Font("Dialog", 0, 10));
        jtxtKeterangan.setText("Keterangan");
        getContentPane().add(jtxtKeterangan);
        jtxtKeterangan.setBounds(260, 100, 530, 20);

        jtblGroupDetail.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jtblGroupDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "id", "Module", "Keterangan", "Read", "Confirm", "Entry", "Update", "Delete", "Print", "Export", "Import"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblGroupDetail.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jtblGroupDetail.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jtblGroupDetailPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jtblGroupDetail);
        jtblGroupDetail.getColumnModel().getColumn(0).setMinWidth(0);
        jtblGroupDetail.getColumnModel().getColumn(0).setPreferredWidth(0);
        jtblGroupDetail.getColumnModel().getColumn(0).setMaxWidth(0);
        jtblGroupDetail.getColumnModel().getColumn(1).setMinWidth(200);
        jtblGroupDetail.getColumnModel().getColumn(1).setPreferredWidth(200);
        jtblGroupDetail.getColumnModel().getColumn(1).setMaxWidth(200);
        jtblGroupDetail.getColumnModel().getColumn(2).setMinWidth(300);
        jtblGroupDetail.getColumnModel().getColumn(2).setPreferredWidth(300);
        jtblGroupDetail.getColumnModel().getColumn(2).setMaxWidth(300);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(70, 150, 720, 280);

        jbtnBrowse.setFont(new java.awt.Font("Dialog", 0, 10));
        jbtnBrowse.setText("...");
        jbtnBrowse.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jbtnBrowseItemStateChanged(evt);
            }
        });
        jbtnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBrowseActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnBrowse);
        jbtnBrowse.setBounds(430, 80, 30, 17);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 10));
        jLabel1.setText("Company");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(70, 120, 140, 14);

        jcmbCompany.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jcmbCompany.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jcmbCompanyMouseClicked(evt);
            }
        });
        jcmbCompany.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbCompanyItemStateChanged(evt);
            }
        });
        jcmbCompany.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcmbCompanyActionPerformed(evt);
            }
        });
        getContentPane().add(jcmbCompany);
        jcmbCompany.setBounds(260, 120, 210, 20);

        jButton2.setFont(new java.awt.Font("Dialog", 0, 10));
        jButton2.setText("Check All");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(320, 440, 100, 23);

        jButton3.setFont(new java.awt.Font("Dialog", 0, 10));
        jButton3.setText("Un Check All");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(420, 440, 130, 23);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 10));
        jLabel2.setText("Set");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(70, 440, 80, 14);

        jcmbAccess.setFont(new java.awt.Font("Dialog", 0, 10));
        jcmbAccess.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(jcmbAccess);
        jcmbAccess.setBounds(160, 440, 150, 20);

        jtxtFind.setFont(new java.awt.Font("Dialog", 0, 10));
        jtxtFind.setText("Type and enter to find module");
        jtxtFind.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtxtFindKeyReleased(evt);
            }
        });
        getContentPane().add(jtxtFind);
        jtxtFind.setBounds(550, 440, 240, 20);

        jtxtTanggalEntry.setEditable(false);
        jtxtTanggalEntry.setFont(new java.awt.Font("Dialog", 0, 8));
        jtxtTanggalEntry.setText("TanggalEntry");
        getContentPane().add(jtxtTanggalEntry);
        jtxtTanggalEntry.setBounds(360, 30, 170, 16);

        jtxtTanggalUpdate.setEditable(false);
        jtxtTanggalUpdate.setFont(new java.awt.Font("Dialog", 0, 8));
        jtxtTanggalUpdate.setText("TanggalUpdate");
        getContentPane().add(jtxtTanggalUpdate);
        jtxtTanggalUpdate.setBounds(530, 30, 130, 16);

        jtxtUserID.setEditable(false);
        jtxtUserID.setFont(new java.awt.Font("Dialog", 0, 8));
        jtxtUserID.setText("UserID");
        getContentPane().add(jtxtUserID);
        jtxtUserID.setBounds(660, 30, 140, 16);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
         try {
            moveFirst();

            
            
         } catch (CodeException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formInternalFrameOpened

private void kdatePurchaseDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_kdatePurchaseDateFocusLost

}//GEN-LAST:event_kdatePurchaseDateFocusLost

private void kdatePurchaseDateCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_kdatePurchaseDateCaretPositionChanged

}//GEN-LAST:event_kdatePurchaseDateCaretPositionChanged

private void kdatePurchaseDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_kdatePurchaseDatePropertyChange

}//GEN-LAST:event_kdatePurchaseDatePropertyChange

private void jbtnBrowseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jbtnBrowseItemStateChanged

}//GEN-LAST:event_jbtnBrowseItemStateChanged

private void jbtnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBrowseActionPerformed
browsecontroller ob=new browsecontroller();
ob.showbrowser(ob.mastergroup, "", jtxtKodeGroup);
        try {
            if (obj.initdata(jtxtKodeGroup.getText())) {
                showData();
            }
        } catch (CodeException ex) {
            Logger.getLogger(FrmMastergroup.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_jbtnBrowseActionPerformed

private void jcmbCompanyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcmbCompanyActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_jcmbCompanyActionPerformed

private void jcmbCompanyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcmbCompanyMouseClicked


}//GEN-LAST:event_jcmbCompanyMouseClicked

private void jcmbCompanyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbCompanyItemStateChanged

    try {
        showData();

        
    }catch(Exception e) {

    }

}//GEN-LAST:event_jcmbCompanyItemStateChanged

private void setaccess(Boolean bcheked){
    int col=0;
    if (jcmbAccess.getSelectedItem().equals("All")){
        for (col=3;col<=10;col++){
            int i=0;
            for (i=0;i<jtblGroupDetail.getRowCount();i++){
                jtblGroupDetail.setValueAt(bcheked, i, col);

                setdatamastergroupdetail(i, col);
            }
        }
    } else {
        if (jcmbAccess.getSelectedItem().equals("Read")){
            col=3;
        }
        if (jcmbAccess.getSelectedItem().equals("Confirm")){
            col=4;
        }
        if (jcmbAccess.getSelectedItem().equals("Entry")){
            col=5;
        }
        if (jcmbAccess.getSelectedItem().equals("Update")){
            col=6;
        }
        if (jcmbAccess.getSelectedItem().equals("Delete")){
            col=7;
        }
        if (jcmbAccess.getSelectedItem().equals("Print")){
            col=8;
        }
        if (jcmbAccess.getSelectedItem().equals("Export")){
            col=9;
        }
        if (jcmbAccess.getSelectedItem().equals("Import")){
            col=10;
        }

        int i=0;
        for (i=0;i<jtblGroupDetail.getRowCount();i++){
            jtblGroupDetail.setValueAt(bcheked, i, col);
            setdatamastergroupdetail(i, col);
        }
    }
}
private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    // TODO add your handling code here:
    setaccess(true);
}//GEN-LAST:event_jButton2ActionPerformed

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    // TODO add your handling code here:
    setaccess(false);
}//GEN-LAST:event_jButton3ActionPerformed

private void jtblGroupDetailPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jtblGroupDetailPropertyChange
    int irow=jtblGroupDetail.getSelectedRow();
    int icol=jtblGroupDetail.getSelectedColumn();

    setdatamastergroupdetail(irow,icol);
    
}//GEN-LAST:event_jtblGroupDetailPropertyChange

private void jtxtFindKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtFindKeyReleased
    // TODO add your handling code here:
    if (evt.getKeyCode()==evt.VK_ENTER){
        find(jtxtFind.getText());
    }
}//GEN-LAST:event_jtxtFindKeyReleased


    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {                                            
        setToolBar(iformtype,istatus);
        mf.setIcon(CLASSNAME);
    }

	
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrmMastergroup().setVisible(true);
                } catch (CodeException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator HorizontalLine;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jHeader;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton jbtnBrowse;
    private javax.swing.JComboBox jcmbAccess;
    protected javax.swing.JComboBox jcmbCompany;
    private javax.swing.JLabel jlblKeterangan;
    private javax.swing.JLabel jlblKodeGroup;
    protected javax.swing.JTable jtblGroupDetail;
    private javax.swing.JTextField jtxtFind;
    private javax.swing.JTextField jtxtKeterangan;
    private javax.swing.JTextField jtxtKodeGroup;
    private javax.swing.JTextField jtxtTanggalEntry;
    private javax.swing.JTextField jtxtTanggalUpdate;
    private javax.swing.JTextField jtxtUserID;
    // End of variables declaration//GEN-END:variables

 
    public void moveFirst() throws CodeException {
        obj.moveFirst();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void movePrevious() throws CodeException {
        obj.movePrevious();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void moveNext() throws CodeException {
        obj.moveNext();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void moveLast() throws CodeException {
        obj.moveLast();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void searchData() throws CodeException {
        obj = new MasterGroupExt();
        obj.initdata(this.jtxtKodeGroup.getText());
        showData();
        mf.setIcon(CLASSNAME);
    }
    public void newData() throws CodeException {
        obj = new MasterGroupExt();
        istatus=1;
        showData();
        setToolBar(iformtype,istatus);
    }

    public void saveData() throws CodeException {
        setCursor(GlobalUtils.HOURGLASSCURSOR);
        MastergroupdetailExt o;

        if (!"".equals(jtxtKodeGroup.getText()) ) {

            
            setData();
            obj.update();

            for (int i=0;i<mgs.size();i++){
                o=mgs.get(i);
                if (o.updateme()){
                    if (o.getId()==0){
                        o.setstatus(o.Status_Insert);
                    }
                    o.update();
                }
            }

            
            istatus = 0;
            showData();
            setToolBar(iformtype, istatus);
            mf.setIcon(CLASSNAME);

        }else {
            JOptionPane.showMessageDialog(null, "Group Code Cannot be Empty", "Form Group", JOptionPane.ERROR_MESSAGE);                
        }
       setCursor(GlobalUtils.NORMALCURSOR);
        
    }

    public void showData() throws CodeException {
             setCursor(GlobalUtils.HOURGLASSCURSOR);
             bonload=true;
             jtxtKodeGroup.setText(obj.getKodeGroup());
             jtxtKeterangan.setText(obj.getKeterangan());
             jtxtTanggalEntry.setText(GlobalUtils.churuf(obj.getTanggalEntry()));
             jtxtTanggalUpdate.setText(GlobalUtils.churuf(obj.getTanggalUpdate()));
             jtxtUserID.setText(obj.getUserId());

             
             GlobalModel.clearRow(tmodel);
             int i = 0;
             mgs=new Mastergroupdetailcols();
             if (mgs.initdataAll(obj.getKodeGroup(),jcmbCompany.getSelectedItem().toString())){
                 for (i=0;i<mgs.size();i++) {
                    MastergroupdetailExt mg = mgs.get(i);

                    tmodel.addRow(data);

                    if (mg.getId() != null) {
                        tmodel.setValueAt(mg.getId(), i, 0);
                    }else {
                        tmodel.setValueAt("0", i, 0);
                    }

                    tmodel.setValueAt(mg.getModule(), i, 1);
                    tmodel.setValueAt(mg.getModulename(), i, 2);
                    tmodel.setValueAt(mg.getRead()==1?true:false, i, 3);
                    tmodel.setValueAt(mg.getConfirm()==1?true:false, i, 4);
                    tmodel.setValueAt(mg.getEntry()==1?true:false, i, 5);
                    tmodel.setValueAt(mg.getUpdate()==1?true:false, i, 6);
                    tmodel.setValueAt(mg.getDelete()==1?true:false, i, 7);
                    tmodel.setValueAt(mg.getPrint()==1?true:false, i, 8);
                    tmodel.setValueAt(mg.getExport()==1?true:false, i, 9);
                    tmodel.setValueAt(mg.getImport1()==1?true:false, i, 10);
                 }
             }
             bonload=false;
             setCursor(GlobalUtils.NORMALCURSOR);

    }

    public void delete() throws CodeException {
        obj.delete();
        obj.moveFirst();
        showData();
        mf.setIcon(CLASSNAME);
    }

    public void setToolBar(int iFormType, int istatus) {
        mf.setToolBar(iformtype,istatus);        
    }

    public void setData() throws CodeException {
        
          if (istatus==1){
              obj.insert();
          }
          obj.setKodeGroup(jtxtKodeGroup.getText()) ;
          obj.setKeterangan(jtxtKeterangan.getText()) ;
          

    }

    public void undo() throws CodeException {
        istatus = 0;
        moveFirst();
        showData();
    }

    public void execute() throws CodeException {
       saveData();
    }


    public void importCsv() throws CodeException {
            
        

    }

    public void exportCsv() throws CodeException {
        
    
        
        
    }

    public void importText() throws CodeException {
        
    }

    public void exportText() throws CodeException {
        
    }


    public void printData() throws CodeException {
        
    }

    private void setdatamastergroupdetail(int irow, int icol) {
        if (!bonload&&icol>2&&irow>-1){
            String module = tmodel.getValueAt(irow, 1) + "";
            boolean bread = tmodel.getValueAt(irow, 3) == null? false : Boolean.parseBoolean(tmodel.getValueAt(irow, 3)+"") ;
            boolean bconfirm = tmodel.getValueAt(irow, 4) == null? false : Boolean.parseBoolean(tmodel.getValueAt(irow, 4)+"") ;
            boolean bentry = tmodel.getValueAt(irow, 5) == null? false : Boolean.parseBoolean(tmodel.getValueAt(irow, 5)+"") ;
            boolean bupdate = tmodel.getValueAt(irow, 6) == null? false : Boolean.parseBoolean(tmodel.getValueAt(irow, 6)+"") ;
            boolean bdelete = tmodel.getValueAt(irow, 7) == null? false : Boolean.parseBoolean(tmodel.getValueAt(irow, 7)+"") ;
            boolean bprint = tmodel.getValueAt(irow, 8) == null? false : Boolean.parseBoolean(tmodel.getValueAt(irow, 8)+"") ;
            boolean bexport = tmodel.getValueAt(irow, 9) == null? false : Boolean.parseBoolean(tmodel.getValueAt(irow, 9)+"") ;
            boolean bimport = tmodel.getValueAt(irow, 10) == null? false : Boolean.parseBoolean(tmodel.getValueAt(irow, 10)+"") ;

            MastergroupdetailExt mg = mgs.get(irow);
            mg.setKodeGroup(jtxtKodeGroup.getText());
            mg.setModule(module);
            mg.setCompany(jcmbCompany.getSelectedItem()+"");
            mg.setRead(bread?1:0);
            mg.setConfirm(bconfirm?1:0);
            mg.setEntry(bentry?1:0);
            mg.setUpdate(bupdate?1:0);
            mg.setDelete(bdelete?1:0);
            mg.setPrint(bprint?1:0);
            mg.setExport(bexport?1:0);
            mg.setImport1(bimport?1:0);
            mg.setupdateme(true);

            mgs.set(irow, mg);
            
        }
    }

    private void find(String text) {
        int i=0;
        for (i=0;i<tmodel.getRowCount();i++){
            if (GlobalUtils.churuf(tmodel.getValueAt(i, 1)).equalsIgnoreCase(text)||GlobalUtils.churuf(tmodel.getValueAt(i, 2)).equalsIgnoreCase(text)){
                GlobalUtils.selectCellTable(jtblGroupDetail, i, 1);
                break;
            }
        }
    }
    
}
